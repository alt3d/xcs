// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios11.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name XsollaSDKLoginKitUnity
import AuthenticationServices
import Foundation
import Swift
import UIKit
import WebKit
import XsollaSDKLoginKit
import _Concurrency
@objc public enum TokenGrantType : ObjectiveC.NSInteger {
  case authorizationCode
  case refreshToken
  case clientCredentials
  public init?(rawValue: ObjectiveC.NSInteger)
  public typealias RawValue = ObjectiveC.NSInteger
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
@objc public class OAuth2Params : ObjectiveC.NSObject {
  @objc final public let clientId: ObjectiveC.NSInteger
  @objc final public let state: Foundation.NSString
  @objc final public let responseType: Foundation.NSString
  @objc final public let scope: Foundation.NSString?
  @objc final public let redirectUri: Foundation.NSString?
  @objc public init(clientId: ObjectiveC.NSInteger, state: Foundation.NSString, scope: Foundation.NSString?, redirectUri: Foundation.NSString?)
  @objc deinit
}
@objc public class JWTGenerationParams : ObjectiveC.NSObject {
  @objc final public let grantType: XsollaSDKLoginKitUnity.TokenGrantType
  @objc final public let clientId: ObjectiveC.NSInteger
  @objc final public let refreshToken: Foundation.NSString?
  @objc final public let clientSecret: Foundation.NSString?
  @objc final public let redirectUri: Foundation.NSString?
  @objc public init(grantType: XsollaSDKLoginKitUnity.TokenGrantType, clientId: ObjectiveC.NSInteger, refreshToken: Foundation.NSString? = nil, clientSecret: Foundation.NSString? = nil, redirectUri: Foundation.NSString? = nil)
  @objc deinit
}
@available(iOS 13.4, *)
extension XsollaSDKLoginKit.WebAuthenticationSession.WebAuthenticationSessionError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class LoginKitUnity : ObjectiveC.NSObject {
  @objc public static let shared: XsollaSDKLoginKitUnity.LoginKitUnity
  @objc final public func authByUsernameAndPassword(username: Foundation.NSString, password: Foundation.NSString, oAuth2Params: XsollaSDKLoginKitUnity.OAuth2Params, jwtParams: XsollaSDKLoginKitUnity.JWTGenerationParams, completion: @escaping (XsollaSDKLoginKitUnity.AccessTokenInfo?, Foundation.NSError?) -> Swift.Void)
  @objc final public func uploadUserPicture(accessToken: Foundation.NSString, imageURL: Foundation.NSURL, completion: @escaping (Foundation.NSString?, Foundation.NSError?) -> Swift.Void)
  @objc final public func linkSocialNetwork(_ providerName: Foundation.NSString, accessToken: Foundation.NSString, redirectUrl: Foundation.NSString, userAgent: Foundation.NSString?, presenter: XsollaSDKLoginKitUnity.ViewControllerPresenting, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc deinit
}
@available(iOS 13.4, *)
extension XsollaSDKLoginKitUnity.LoginKitUnity {
  @objc final public func authBySocialNetwork(_ providerName: Foundation.NSString, oAuth2Params: XsollaSDKLoginKitUnity.OAuth2Params, jwtParams: XsollaSDKLoginKitUnity.JWTGenerationParams, presentationContextProvider: XsollaSDKLoginKitUnity.PresentationContextProviding, completion: @escaping (XsollaSDKLoginKitUnity.AccessTokenInfo?, Foundation.NSError?) -> Swift.Void)
}
public typealias ViewControllerPresenting = UIKit.UIViewController
@available(iOS 13.4, *)
public typealias PresentationContextProviding = AuthenticationServices.ASWebAuthenticationPresentationContextProviding
@available(iOS 13.4, *)
@objc open class WebAuthenticationPresentationContextProvider : ObjectiveC.NSObject, XsollaSDKLoginKitUnity.PresentationContextProviding {
  @objc public func presentationAnchor(for session: AuthenticationServices.ASWebAuthenticationSession) -> AuthenticationServices.ASPresentationAnchor
  @objc public init(presentationAnchor: UIKit.UIWindow)
  @objc deinit
}
extension XsollaSDKLoginKitUnity.LoginKitUnity {
  public static let version: Swift.String
}
extension Foundation.NSError {
  @objc public static let loginKitErrorCodeUnknown: Swift.Int
  @objc public static let loginKitErrorCodeASCanceledLogin: Swift.Int
  @objc public static let loginKitErrorCodeASpresentationContextNotProvided: Swift.Int
  @objc public static let loginKitErrorCodeASpresentationContextInvalid: Swift.Int
  @objc public static let loginKitErrorCodeUnknownError: Swift.Int
  @objc public static let loginKitErrorCodeFailedURLExtraction: Swift.Int
  @objc public static let loginKitErrorCodeAuthCodeExtractionError: Swift.Int
  @objc public static let loginKitErrorCodeNetworkLinkingError: Swift.Int
  @objc public static let loginKitErrorCodeInvalidToken: Swift.Int
  @objc public static let loginKitErrorCodeInvalidRedirectUrl: Swift.Int
}
extension XsollaSDKLoginKit.LoginKitError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class AccessTokenInfo : ObjectiveC.NSObject {
  @objc final public let accessToken: Foundation.NSString
  @objc final public let expiresIn: ObjectiveC.NSInteger
  @objc final public let refreshToken: Foundation.NSString?
  @objc final public let tokenType: Foundation.NSString
  @objc deinit
}
extension XsollaSDKLoginKitUnity.TokenGrantType : Swift.Equatable {}
extension XsollaSDKLoginKitUnity.TokenGrantType : Swift.Hashable {}
extension XsollaSDKLoginKitUnity.TokenGrantType : Swift.RawRepresentable {}
